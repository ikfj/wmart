package org.umart.serverCore;

/**
 * ある価格における売り注文数と買い注文数を保持するクラスです．
 * UBoardInformationクラスが利用します．
 * @author 川部 裕司
 * @author 森下 領平
 * @author 小野 功
 */
public class UBoardInfoElement {

  /** 価格。ただし, 成行注文のときは-1が設定される。 */
  private long fPrice;

  /** 売り注文数 */
  private long fSellVolume;

  /** 買い注文数 */
  private long fBuyVolume;

  /**
   * UBoardInfoElementの生成および初期化(成行注文,
   * 売り/買い注文数:0)を行う。
   */
  public UBoardInfoElement() {
    fPrice = -1;
    fSellVolume = 0;
    fBuyVolume = 0;
  }

  /**
   * UBoardInfoElementの生成および初期化を行う。
   * @param price 価格
   * @param sellVolume 売り注文数
   * @param buyVolume 買い注文数
   */
  public UBoardInfoElement(long price, long sellVolume, long buyVolume) {
    fPrice = price;
    fSellVolume = sellVolume;
    fBuyVolume = buyVolume;
  }

  /**
   * UBoardInfoElementオブジェクトの複製を返す。
   * @return UBoardInfoElementオブジェクト
   */
  public Object clone() {
    return new UBoardInfoElement(fPrice, fSellVolume, fBuyVolume);
  }

  /**
   * 価格を返す。
   * @return 価格
   */
  public long getPrice() {
    return fPrice;
  }

  /**
   * 売り注文数を返す。
   * @return 売り注文数
   */
  public long getSellVolume() {
    return fSellVolume;
  }

  /**
   * 買い注文数を返す。
   * @return 買い注文数
   */
  public long getBuyVolume() {
    return fBuyVolume;
  }

  /**
   * 価格を設定する。
   * @param price 価格を設定する。
   */
  public void setPrice(long price) {
    fPrice = price;
  }

  /**
   * 売り注文数を設定する。
   * @param sellVolume 売り注文数
   */
  public void setSellVolume(long sellVolume) {
    fSellVolume = sellVolume;
  }

  /**
   * 売り注文数にvolumeを加える。
   * @param volume 売り注文数の増分
   */
  public void addToSellVolume(long volume) {
    fSellVolume += volume;
  }

  /**
   * 買い注文数を設定する。
   * @param buyVolume 買い注文数
   */
  public void setBuyVolume(long buyVolume) {
    fBuyVolume = buyVolume;
  }

  /**
   * 買い注文数にvolumeを加える。
   * @param volume 買い注文数の増分
   */
  public void addToBuyVolume(long volume) {
    fBuyVolume += volume;
  }

  /**
   * 成行注文(価格:-1), 売り/買い注文数を0に初期化する。
   */
  public void clear() {
    fPrice = -1;
    fBuyVolume = fSellVolume = 0;
  }

  /**
   * 内部情報を出力する。
   */
  public void printOn() {
    System.out.print("Price:" + fPrice);
    System.out.print(", fSellVolume:" + fSellVolume);
    System.out.println(", fBuyVolume:" + fBuyVolume);
  }

}
